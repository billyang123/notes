/**
 * name:          jquery-foxibox-0.2.min.js
 * author:        Stefan Benicke - www.opusonline.at
 * version:       0.2
 * last update:   30.09.2009
 * category:      jQuery plugin
 * copyright:     (c) 2009 Stefan Benicke (www.opusonline.at)
 * license:       GNU GPLv3 <http://www.gnu.org/licenses/>
 * documentation: http://www.opusonline.at/foxitools/foxibox/
 */
 /*!
 * jQuery Migrate - v1.1.1 - 2013-02-16
 * https://github.com/jquery/jquery-migrate
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors; Licensed MIT
 */
(function( jQuery, window, undefined ) {
// See http://bugs.jquery.com/ticket/13335
// "use strict";


var warnedAbout = {};

// List of warnings already given; public read only
jQuery.migrateWarnings = [];

// Set to true to prevent console output; migrateWarnings still maintained
// jQuery.migrateMute = false;

// Show a message on the console so devs know we're active
if ( !jQuery.migrateMute && window.console && console.log ) {
	console.log("JQMIGRATE: Logging is active");
}

// Set to false to disable traces that appear with warnings
if ( jQuery.migrateTrace === undefined ) {
	jQuery.migrateTrace = true;
}

// Forget any warnings we've already given; public
jQuery.migrateReset = function() {
	warnedAbout = {};
	jQuery.migrateWarnings.length = 0;
};

function migrateWarn( msg) {
	if ( !warnedAbout[ msg ] ) {
		warnedAbout[ msg ] = true;
		jQuery.migrateWarnings.push( msg );
		if ( window.console && console.warn && !jQuery.migrateMute ) {
			console.warn( "JQMIGRATE: " + msg );
			if ( jQuery.migrateTrace && console.trace ) {
				console.trace();
			}
		}
	}
}

function migrateWarnProp( obj, prop, value, msg ) {
	if ( Object.defineProperty ) {
		// On ES5 browsers (non-oldIE), warn if the code tries to get prop;
		// allow property to be overwritten in case some other plugin wants it
		try {
			Object.defineProperty( obj, prop, {
				configurable: true,
				enumerable: true,
				get: function() {
					migrateWarn( msg );
					return value;
				},
				set: function( newValue ) {
					migrateWarn( msg );
					value = newValue;
				}
			});
			return;
		} catch( err ) {
			// IE8 is a dope about Object.defineProperty, can't warn there
		}
	}

	// Non-ES5 (or broken) browser; just set the property
	jQuery._definePropertyBroken = true;
	obj[ prop ] = value;
}

if ( document.compatMode === "BackCompat" ) {
	// jQuery has never supported or tested Quirks Mode
	migrateWarn( "jQuery is not compatible with Quirks Mode" );
}


var attrFn = jQuery( "<input/>", { size: 1 } ).attr("size") && jQuery.attrFn,
	oldAttr = jQuery.attr,
	valueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get ||
		function() { return null; },
	valueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set ||
		function() { return undefined; },
	rnoType = /^(?:input|button)$/i,
	rnoAttrNodeType = /^[238]$/,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	ruseDefault = /^(?:checked|selected)$/i;

// jQuery.attrFn
migrateWarnProp( jQuery, "attrFn", attrFn || {}, "jQuery.attrFn is deprecated" );

jQuery.attr = function( elem, name, value, pass ) {
	var lowerName = name.toLowerCase(),
		nType = elem && elem.nodeType;

	if ( pass ) {
		// Since pass is used internally, we only warn for new jQuery
		// versions where there isn't a pass arg in the formal params
		if ( oldAttr.length < 4 ) {
			migrateWarn("jQuery.fn.attr( props, pass ) is deprecated");
		}
		if ( elem && !rnoAttrNodeType.test( nType ) &&
			(attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name])) ) {
			return jQuery( elem )[ name ]( value );
		}
	}

	// Warn if user tries to set `type`, since it breaks on IE 6/7/8; by checking
	// for disconnected elements we don't warn on $( "<button>", { type: "button" } ).
	if ( name === "type" && value !== undefined && rnoType.test( elem.nodeName ) && elem.parentNode ) {
		migrateWarn("Can't change the 'type' of an input or button in IE 6/7/8");
	}

	// Restore boolHook for boolean property/attribute synchronization
	if ( !jQuery.attrHooks[ lowerName ] && rboolean.test( lowerName ) ) {
		jQuery.attrHooks[ lowerName ] = {
			get: function( elem, name ) {
				// Align boolean attributes with corresponding properties
				// Fall back to attribute presence where some booleans are not supported
				var attrNode,
					property = jQuery.prop( elem, name );
				return property === true || typeof property !== "boolean" &&
					( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?

					name.toLowerCase() :
					undefined;
			},
			set: function( elem, value, name ) {
				var propName;
				if ( value === false ) {
					// Remove boolean attributes when set to false
					jQuery.removeAttr( elem, name );
				} else {
					// value is true since we know at this point it's type boolean and not false
					// Set boolean attributes to the same name and set the DOM property
					propName = jQuery.propFix[ name ] || name;
					if ( propName in elem ) {
						// Only set the IDL specifically if it already exists on the element
						elem[ propName ] = true;
					}

					elem.setAttribute( name, name.toLowerCase() );
				}
				return name;
			}
		};

		// Warn only for attributes that can remain distinct from their properties post-1.9
		if ( ruseDefault.test( lowerName ) ) {
			migrateWarn( "jQuery.fn.attr('" + lowerName + "') may use property instead of attribute" );
		}
	}

	return oldAttr.call( jQuery, elem, name, value );
};

// attrHooks: value
jQuery.attrHooks.value = {
	get: function( elem, name ) {
		var nodeName = ( elem.nodeName || "" ).toLowerCase();
		if ( nodeName === "button" ) {
			return valueAttrGet.apply( this, arguments );
		}
		if ( nodeName !== "input" && nodeName !== "option" ) {
			migrateWarn("jQuery.fn.attr('value') no longer gets properties");
		}
		return name in elem ?
			elem.value :
			null;
	},
	set: function( elem, value ) {
		var nodeName = ( elem.nodeName || "" ).toLowerCase();
		if ( nodeName === "button" ) {
			return valueAttrSet.apply( this, arguments );
		}
		if ( nodeName !== "input" && nodeName !== "option" ) {
			migrateWarn("jQuery.fn.attr('value', val) no longer sets properties");
		}
		// Does not return so that setAttribute is also used
		elem.value = value;
	}
};


var matched, browser,
	oldInit = jQuery.fn.init,
	oldParseJSON = jQuery.parseJSON,
	// Note this does NOT include the #9521 XSS fix from 1.7!
	rquickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*|#([\w\-]*))$/;

// $(html) "looks like html" rule change
jQuery.fn.init = function( selector, context, rootjQuery ) {
	var match;

	if ( selector && typeof selector === "string" && !jQuery.isPlainObject( context ) &&
			(match = rquickExpr.exec( selector )) && match[1] ) {
		// This is an HTML string according to the "old" rules; is it still?
		if ( selector.charAt( 0 ) !== "<" ) {
			migrateWarn("$(html) HTML strings must start with '<' character");
		}
		// Now process using loose rules; let pre-1.8 play too
		if ( context && context.context ) {
			// jQuery object as context; parseHTML expects a DOM object
			context = context.context;
		}
		if ( jQuery.parseHTML ) {
			return oldInit.call( this, jQuery.parseHTML( jQuery.trim(selector), context, true ),
					context, rootjQuery );
		}
	}
	return oldInit.apply( this, arguments );
};
jQuery.fn.init.prototype = jQuery.fn;

// Let $.parseJSON(falsy_value) return null
jQuery.parseJSON = function( json ) {
	if ( !json && json !== null ) {
		migrateWarn("jQuery.parseJSON requires a valid JSON string");
		return null;
	}
	return oldParseJSON.apply( this, arguments );
};

jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

// Don't clobber any existing jQuery.browser in case it's different
if ( !jQuery.browser ) {
	matched = jQuery.uaMatch( navigator.userAgent );
	browser = {};

	if ( matched.browser ) {
		browser[ matched.browser ] = true;
		browser.version = matched.version;
	}

	// Chrome is Webkit, but Webkit is also Safari.
	if ( browser.chrome ) {
		browser.webkit = true;
	} else if ( browser.webkit ) {
		browser.safari = true;
	}

	jQuery.browser = browser;
}

// Warn if the code tries to get jQuery.browser
migrateWarnProp( jQuery, "browser", jQuery.browser, "jQuery.browser is deprecated" );

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	migrateWarn( "jQuery.sub() is deprecated" );
	return jQuerySub;
};


// Ensure that $.ajax gets the new parseJSON defined in core.js
jQuery.ajaxSetup({
	converters: {
		"text json": jQuery.parseJSON
	}
});


var oldFnData = jQuery.fn.data;

jQuery.fn.data = function( name ) {
	var ret, evt,
		elem = this[0];

	// Handles 1.7 which has this behavior and 1.8 which doesn't
	if ( elem && name === "events" && arguments.length === 1 ) {
		ret = jQuery.data( elem, name );
		evt = jQuery._data( elem, name );
		if ( ( ret === undefined || ret === evt ) && evt !== undefined ) {
			migrateWarn("Use of jQuery.fn.data('events') is deprecated");
			return evt;
		}
	}
	return oldFnData.apply( this, arguments );
};


var rscriptType = /\/(java|ecma)script/i,
	oldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;

jQuery.fn.andSelf = function() {
	migrateWarn("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()");
	return oldSelf.apply( this, arguments );
};

// Since jQuery.clean is used internally on older versions, we only shim if it's missing
if ( !jQuery.clean ) {
	jQuery.clean = function( elems, context, fragment, scripts ) {
		// Set context per 1.8 logic
		context = context || document;
		context = !context.nodeType && context[0] || context;
		context = context.ownerDocument || context;

		migrateWarn("jQuery.clean() is deprecated");

		var i, elem, handleScript, jsTags,
			ret = [];

		jQuery.merge( ret, jQuery.buildFragment( elems, context ).childNodes );

		// Complex logic lifted directly from jQuery 1.8
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	};
}

var eventAdd = jQuery.event.add,
	eventRemove = jQuery.event.remove,
	eventTrigger = jQuery.event.trigger,
	oldToggle = jQuery.fn.toggle,
	oldLive = jQuery.fn.live,
	oldDie = jQuery.fn.die,
	ajaxEvents = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",
	rajaxEvent = new RegExp( "\\b(?:" + ajaxEvents + ")\\b" ),
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	hoverHack = function( events ) {
		if ( typeof( events ) !== "string" || jQuery.event.special.hover ) {
			return events;
		}
		if ( rhoverHack.test( events ) ) {
			migrateWarn("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'");
		}
		return events && events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

// Event props removed in 1.9, put them back if needed; no practical way to warn them
if ( jQuery.event.props && jQuery.event.props[ 0 ] !== "attrChange" ) {
	jQuery.event.props.unshift( "attrChange", "attrName", "relatedNode", "srcElement" );
}

// Undocumented jQuery.event.handle was "deprecated" in jQuery 1.7
if ( jQuery.event.dispatch ) {
	migrateWarnProp( jQuery.event, "handle", jQuery.event.dispatch, "jQuery.event.handle is undocumented and deprecated" );
}

// Support for 'hover' pseudo-event and ajax event warnings
jQuery.event.add = function( elem, types, handler, data, selector ){
	if ( elem !== document && rajaxEvent.test( types ) ) {
		migrateWarn( "AJAX events should be attached to document: " + types );
	}
	eventAdd.call( this, elem, hoverHack( types || "" ), handler, data, selector );
};
jQuery.event.remove = function( elem, types, handler, selector, mappedTypes ){
	eventRemove.call( this, elem, hoverHack( types ) || "", handler, selector, mappedTypes );
};

jQuery.fn.error = function() {
	var args = Array.prototype.slice.call( arguments, 0);
	migrateWarn("jQuery.fn.error() is deprecated");
	args.splice( 0, 0, "error" );
	if ( arguments.length ) {
		return this.bind.apply( this, args );
	}
	// error event should not bubble to window, although it does pre-1.7
	this.triggerHandler.apply( this, args );
	return this;
};

jQuery.fn.toggle = function( fn, fn2 ) {

	// Don't mess with animation or css toggles
	if ( !jQuery.isFunction( fn ) || !jQuery.isFunction( fn2 ) ) {
		return oldToggle.apply( this, arguments );
	}
	migrateWarn("jQuery.fn.toggle(handler, handler...) is deprecated");

	// Save reference to arguments for access in closure
	var args = arguments,
		guid = fn.guid || jQuery.guid++,
		i = 0,
		toggler = function( event ) {
			// Figure out which function to execute
			var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
			jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

			// Make sure that clicks stop
			event.preventDefault();

			// and execute the function
			return args[ lastToggle ].apply( this, arguments ) || false;
		};

	// link all the functions, so any of them can unbind this click handler
	toggler.guid = guid;
	while ( i < args.length ) {
		args[ i++ ].guid = guid;
	}

	return this.click( toggler );
};

jQuery.fn.live = function( types, data, fn ) {
	migrateWarn("jQuery.fn.live() is deprecated");
	if ( oldLive ) {
		return oldLive.apply( this, arguments );
	}
	jQuery( this.context ).on( types, this.selector, data, fn );
	return this;
};

jQuery.fn.die = function( types, fn ) {
	migrateWarn("jQuery.fn.die() is deprecated");
	if ( oldDie ) {
		return oldDie.apply( this, arguments );
	}
	jQuery( this.context ).off( types, this.selector || "**", fn );
	return this;
};

// Turn global events into document-triggered events
jQuery.event.trigger = function( event, data, elem, onlyHandlers  ){
	if ( !elem && !rajaxEvent.test( event ) ) {
		migrateWarn( "Global events are undocumented and deprecated" );
	}
	return eventTrigger.call( this,  event, data, elem || document, onlyHandlers  );
};
jQuery.each( ajaxEvents.split("|"),
	function( _, name ) {
		jQuery.event.special[ name ] = {
			setup: function() {
				var elem = this;

				// The document needs no shimming; must be !== for oldIE
				if ( elem !== document ) {
					jQuery.event.add( document, name + "." + jQuery.guid, function() {
						jQuery.event.trigger( name, null, elem, true );
					});
					jQuery._data( this, name, jQuery.guid++ );
				}
				return false;
			},
			teardown: function() {
				if ( this !== document ) {
					jQuery.event.remove( document, name + "." + jQuery._data( this, name ) );
				}
				return false;
			}
		};
	}
);


})( jQuery, window );
/**
 * name:          jquery-foxibox-0.2.js
 * author:        Stefan Benicke - www.opusonline.at
 * version:       0.2
 * last update:   30.09.2009
 * category:      jQuery plugin
 * copyright:     (c) 2009 Stefan Benicke (www.opusonline.at)
 * license:       GNU GPLv3
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * documentation: http://www.opusonline.at/foxitools/foxibox/
 */
 (function($) {
  $.fn.foxibox = function(settings) {

    settings = jQuery.extend({
      speed: 'normal',
      overlayOpacity: 0.5,
      title: true,
      scale: true,
      border: 10,
      textImage: '',
      textOf: '/',
			callback: function(){}
		}, settings);

    var window_width;
    var window_height;
    var document_width;
    var document_height;
    var scroll_top;
    var scroll_left;
    var open_gallery = false;
		var images_array = [];
    var array_position;
    var set_array;
    var set_position;
    var set_count;
    var is_set;
    var scaled;
    var rescaled;
    var container_width;
    var container_height;
    var container_top;
    var container_left;
    var loader_top;
    var loader_left;
    var scaled_top;
    var scaled_left;
    var scaled_loader_top;
    var scaled_loader_left;
    var old_overlay_width;
    var old_overlay_height;
	
    var foxibox_objects = '<div id="foxibox_overlay"></div><div id="foxibox_loader"></div><div id="foxibox_container"><img id="foxibox_image" src="" /></div><div id="foxibox_details"><div id="foxibox_title"></div><a href="#" id="close"></a><a href="#" id="scale"></a><div id="foxibox_nav"><a href="#" id="next"></a><a href="#" id="prev"></a><div></div></div></div>';

    $('body').append(foxibox_objects);
    $('#foxibox_overlay, #foxibox_loader, #foxibox_container, #foxibox_details').hide();

    getSize();
    getScroll();
		$(window).scroll(function(){ getScroll(); });
    $(window).resize(function(){
      if(open_gallery){
        $('#foxibox_overlay').hide();
        getSize();
        scaled = false;
        rescaled = false;
        $('#foxibox_overlay').css({'width':document_width, 'height':document_height}).show();
        $('#foxibox_image, #foxibox_title, #foxibox_details, #foxibox_details #scale').hide();
        loaderPosition();
        $('#foxibox_loader').show();
        if(is_set) showImage($(set_array[(set_position-1)]));
        else showImage($(images_array[(array_position)]));
      }
    });

		$(document).keydown(function(event){
      switch(event.keyCode){
				// left arrow and 'p'
        case 37: case 80:
          if(open_gallery){
            if(set_position > 1) changeImage('previous');
            return false;
          }
					break;
				// right arrow and 'n'
        case 39: case 78:
					if(open_gallery){
            if(set_position < set_count) changeImage('next');
            return false;
          }
					break;
        // 'esc' and 'c'
				case 27: case 67:
					if(open_gallery){
            close();
            return false;
          }
					break;
			};
    });

		$(this).each(function(){
			images_array[images_array.length] = this;
      $(this).bind('click', function(){
				open(this);
				return false;
			});
		});
	
		function open(element){
      open_gallery = true;
      scaled = false;
      rescaled = false;
      
      $('#foxibox_details, #foxibox_container, #foxibox_loader, #foxibox_overlay').remove();

			// find out if the picture is part of a set
      array_position = 0;
   		set_array = [];
      set_position = 0;
      set_count = 0;
      is_set = false;
      
      var element_rel = $(element).attr('rel');
      var element_href = $(element).attr('href');

			var gallery_reg_exp = /\[(?:.*)\]/;
			var gallery = gallery_reg_exp.exec(element_rel);
		
			for (var i = 0; i < images_array.length; i++){
        var this_rel = $(images_array[i]).attr('rel');
        var this_href = $(images_array[i]).attr('href');
				if(this_rel.indexOf(gallery) != -1 && this_rel == element_rel){
          set_count++;
					set_array[set_array.length] = images_array[i];
					if(this_href == element_href) {
            array_position = i;
            set_position = set_count;
          }
				}
        else if(this_href == element_href) array_position = i;
			}
      if(set_count > 1) is_set = true;
      
      // create objects and locate container and loader
      $('body').append(foxibox_objects);
      
      scaled_top = 0;
      scaled_left = 0;
      container_width = 100;
      container_height = 100;
      container_top = scroll_top+window_height/2-container_height/2-settings.border;
      container_left = scroll_left+window_width/2-container_width/2-settings.border;

      // fix ie6 bug with opacity
			if($.browser.msie && $.browser.version <= 6){}
      else $('#foxibox_overlay').css('opacity', settings.overlayOpacity);

      $('#foxibox_overlay').css({'width':document_width,
        'height':document_height}).hide().bind('click', function() { close(); });
      $('#foxibox_container').css({'top':container_top,
        'left':container_left,
        'width':container_width,
        'height':container_height,
        'padding':settings.border}).hide();
      $('#foxibox_details').css({'top':container_top,
        'left':container_left}).hide();
      loaderPosition();
      $('#foxibox_loader').css({'top':loader_top, 'left':loader_left}).hide();
      $('#foxibox_nav #prev').bind('click', function(){
        if(set_position > 1) changeImage('previous');
        return false;
      });
      $('#foxibox_nav #next').bind('click', function(){
        if(set_position < set_count) changeImage('next');
        return false;
      });
      $('#foxibox_details #close').bind('click', function(){
        close();
        return false;
      });
      $('#foxibox_details #scale').bind('click', function(){
        scaleImage();
        return false;
      }).hide();
      $('#foxibox_nav, #foxibox_title, #foxibox_image').hide();
      
      // show overlay and container
      $('#foxibox_overlay, #foxibox_container, #foxibox_loader').show();
      
      showImage(element);
    }
    
    function showImage(element){
      var element_href = $(element).attr('href');
      var element_title = $(element).attr('title');

      if(settings.title && element_title) $('#foxibox_title').text(element_title).show();
      if(is_set){
        $('#foxibox_nav div').text(settings.textImage+set_position+settings.textOf+set_count);
        $('#foxibox_nav').show();
      }

      // preload
      var preload_width = 0;
      var preload_height = 0;
      var preload_img = new Image();

      preload_img.onload = function(){
        preload_width = preload_img.width;
        preload_height = preload_img.height;
        
        // get the details height and the dimensions
        $('#foxibox_details').css('width', preload_width);
        var details_height = $('#foxibox_details').height();
        container_width = preload_width;
        container_height = preload_height + details_height;
      
        // scale to screen if the image is too large
        var prop;
        if(!scaled && settings.scale){
          // too wide
          if((container_width+settings.border*2) > window_width && !scaled){
            prop = preload_width/(window_width-settings.border*2);
            preload_width = Math.round(window_width-settings.border*2);
            preload_height = Math.round(preload_height/prop)-details_height;
            scaled = true;
          }
          // too high
          if((container_height+settings.border*2) > window_height){
            prop = preload_height/(window_height-settings.border*2-details_height);
            preload_height = Math.round(window_height-settings.border*2-details_height);
            preload_width = Math.round(preload_width/prop);
            scaled = true;
          }
          if(scaled){
            // correct details
            $('#foxibox_details').css('width', preload_width);
            details_height = $('#foxibox_details').height();
            container_height = preload_height + details_height;
            container_width = preload_width;
            $('#foxibox_details #scale').show();
          }
        }
        else scaled = false;
      
        container_top = scroll_top+window_height/2-container_height/2-settings.border;
        container_left = scroll_left+window_width/2-container_width/2-settings.border;
        if(container_top < scroll_top) container_top = scroll_top;
        if(container_left < scroll_left) container_left = scroll_left;

        if(scaled && !rescaled){
          scaled_top = container_top;
          scaled_left = container_left;
          scaled_loader_top = loader_top;
          scaled_loader_left = loader_left;
          old_overlay_width = document_width;
          old_overlay_height = document_height;
        }
        if(rescaled){
          container_top = scaled_top;
          container_left = scaled_left;
          loader_top = scaled_loader_top;
          loader_left = scaled_loader_left;
        }

        var details_top = container_top + preload_height + settings.border;
        var details_left = container_left + settings.border;

        // resize overlay
        getSize();
        var full_width = scroll_left+settings.border*2+container_width;
        var full_height = scroll_top+settings.border*2+container_height;
        if(full_width > document_width) $('#foxibox_overlay').css({'width':full_width});
        else $('#foxibox_overlay').css({'width':document_width});
        if(full_height > document_height) $('#foxibox_overlay').css({'height':full_height});
        else $('#foxibox_overlay').css({'height':document_height});
      
        // show image
        $('#foxibox_loader').animate({'top':loader_top, 'left':loader_left});
        $('#foxibox_container').animate({'width':container_width, 'height':container_height, 'left':container_left, 'top':container_top}, settings.speed, function(){
          $('#foxibox_image').width(preload_width).height(preload_height).attr('src', element_href);
          $('#foxibox_loader').hide();
          $('#foxibox_image').fadeIn(settings.speed);
          $('#foxibox_details').css({'top':details_top, 'left':details_left}).fadeIn(settings.speed);
          if(rescaled){
            $('#foxibox_overlay').css({'width':old_overlay_width, 'height':old_overlay_height});
            rescaled = false;
            getSize();
          }
        });
      }
      preload_img.src = element_href;

      // preload neighbour images if is_set
      if(is_set){
        if(set_position > 1){
          var prev_image = new Image();
          prev_image.src = $(set_array[(set_position-2)]).attr('href');
        }
        if(set_position < set_count){
          var next_image = new Image();
          next_image.src = $(set_array[(set_position)]).attr('href');
        }
      }
    }

    function changeImage(direction){
			if(direction == 'previous') set_position--;
      else set_position++;
      $('#foxibox_image, #foxibox_title, #foxibox_details, #foxibox_details #scale').hide();
      loaderPosition();
      $('#foxibox_loader').show();
      scaled = false;

      showImage($(set_array[(set_position-1)]));
    }
    
    function scaleImage(){
      if(!scaled) rescaled = true;
      $('#foxibox_image, #foxibox_title, #foxibox_details').hide();
      loaderPosition();
      $('#foxibox_loader').show();
      if(is_set) showImage($(set_array[(set_position-1)]));
      else showImage($(images_array[(array_position)]));
    }

    function close(){
      $('#foxibox_details, #foxibox_container').fadeOut(settings.speed);
      $('#foxibox_overlay').fadeOut(settings.speed, function(){
        $('#foxibox_details, #foxibox_container, #foxibox_loader, #foxibox_overlay').remove();
      });
      open_gallery = false;
    }

    function loaderPosition(){
      loader_top = scroll_top+window_height/2-$('#foxibox_loader').height()/2;
      loader_left = scroll_left+window_width/2-$('#foxibox_loader').width()/2;
    }

		function getScroll(){
      scroll_top = $(document).scrollTop();
      scroll_left = $(document).scrollLeft();
		}

    function getSize(){
      window_height = $(window).height();
      window_width = $(window).width();
      document_width = $(document).width();
      document_height = $(document).height();
    }
  }
})(jQuery);
